name: Builder ðŸ”§
on:
  push:
    branches:
      - main
      - dev

jobs:
  Musl:
    runs-on: ubuntu-latest

    container: alpine

    steps:
        - name: ^ Checkout
          uses: actions/checkout@v3
          submodules: true

        - name: Copy data.
          run: |
              cp -r "$(pwd)" /source

        - name: Set up environment.
          run: |
              apk add --no-cache jq curl
              echo "GIT_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
              echo "GIT_PROJECT_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
              echo "GIT_USERNAME=${{ github.repository_owner }}" >> $GITHUB_ENV
              echo "GIT_REPO=${{ github.repository }}" >> $GITHUB_ENV
              echo "GIT_DOMAIN=$(sh /source/scripts/get_gh_domain.sh)" >> $GITHUB_ENV
              echo "GIT_WEBPAGE=https://$(sh /source/scripts/get_gh_domain.sh)" >> $GITHUB_ENV

        - name: Run Init.
          run: |
              cd /source
              sh runners/init_alpine.sh

        - name: Collect Artifacts.
          run: |
              mkdir -p /artifacts/AppImage
              mkdir /artifacts/Binary
              mv /runner/page/tlapbot-musl-x86_64.AppImage /artifacts/AppImage/tlapbot-x86_64.AppImage
              mv /runner/page/tlapbot-musl /artifacts/Binary/tlapbot

        - name: Generate SHA256 checksum for AppImage.
          run: |
              cd /artifacts/AppImage
              sha256sum * > sha256sum.txt

        - name: Generate SHA256 checksum for Binary.
          run: |
              cd /artifacts/Binary
              sha256sum * > sha256sum.txt

        - name: Upload AppImage.
          uses: actions/upload-artifact@v3
          with:
            name: AppImage
            path: /artifacts/AppImage

        - name: Upload Binary.
          uses: actions/upload-artifact@v3
          with:
            name: Binary
            path: /artifacts/Binary

  Windows:
    runs-on: ubuntu-latest

    container:
      image: ubuntu
      options: --user root

    steps:
        - name: ^ Checkout
          uses: actions/checkout@v3
          submodules: true

        - name: Copy data.
          run: |
              cp -r "$(pwd)" /source

        - name: Update runtime
          run: apt update

        - name: Set up environment.
          run: |
              apt install -y jq curl
              echo "DEBIAN_FRONTEND=noninteractive" >> $GITHUB_ENV
              echo 'TZ="Europe/Warsaw"' >> $GITHUB_ENV
              echo "GIT_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
              echo "GIT_PROJECT_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
              echo "GIT_USERNAME=${{ github.repository_owner }}" >> $GITHUB_ENV
              echo "GIT_REPO=${{ github.repository }}" >> $GITHUB_ENV
              echo "GIT_DOMAIN=$(sh /source/scripts/get_gh_domain.sh)" >> $GITHUB_ENV
              echo "GIT_WEBPAGE=https://$(sh /source/scripts/get_gh_domain.sh)" >> $GITHUB_ENV

        - name: Run Init.
          run: |
              cd /source
              sh runners/init_windows.sh

        - name: Collect Artifacts.
          run: |
              mkdir -p /artifacts/Binary
              cp /runner/page/tlapbot.exe /artifacts/Binary/

        - name: Generate SHA256 checksum for Binary.
          run: |
              cd /artifacts/Binary
              sha256sum * > sha256sum.txt

        - name: Upload Binary.
          uses: actions/upload-artifact@v3
          with:
            name: Binary
            path: /artifacts/Binary

  GLibc:
    runs-on: ubuntu-latest

    container:
      image: ubuntu
      options: --user root

    steps:
        - name: ^ Checkout
          uses: actions/checkout@v3
          submodules: true

        - name: Copy data.
          run: |
              cp -r "$(pwd)" /source

        - name: Update runtime
          run: apt update

        - name: Set up environment.
          run: |
              apt install -y jq curl
              echo "DEBIAN_FRONTEND=noninteractive" >> $GITHUB_ENV
              echo 'TZ="Europe/Warsaw"' >> $GITHUB_ENV
              echo "GIT_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
              echo "GIT_PROJECT_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
              echo "GIT_USERNAME=${{ github.repository_owner }}" >> $GITHUB_ENV
              echo "GIT_REPO=${{ github.repository }}" >> $GITHUB_ENV
              echo "GIT_DOMAIN=$(sh /source/scripts/get_gh_domain.sh)" >> $GITHUB_ENV
              echo "GIT_WEBPAGE=https://$(sh /source/scripts/get_gh_domain.sh)" >> $GITHUB_ENV

        - name: Run Init.
          run: |
              cd /source
              sh runners/init_ubuntu.sh

        - name: Collect Artifacts.
          run: |
              mkdir -p /artifacts/AppImage
              mkdir /artifacts/Binary
              cp /runner/page/tlapbot-glibc-x86_64.AppImage /artifacts/AppImage/tlapbot-x86_64.AppImage
              cp /runner/page/tlapbot-glibc /artifacts/Binary/tlapbot

        - name: Generate SHA256 checksum for AppImage.
          run: |
              cd /artifacts/AppImage
              sha256sum * > sha256sum.txt

        - name: Generate SHA256 checksum for Binary.
          run: |
              cd /artifacts/Binary
              sha256sum * > sha256sum.txt

        - name: Upload AppImage.
          uses: actions/upload-artifact@v3
          with:
            name: AppImage
            path: /artifacts/AppImage

        - name: Upload Binary.
          uses: actions/upload-artifact@v3
          with:
            name: Binary
            path: /artifacts/Binary

  Pages:
    runs-on: ubuntu-latest
    needs: [Musl, Windows, GLibc]

    container: alpine

    steps:
        - name: ^ Checkout
          uses: actions/checkout@v3

        - name: Copy data.
          run: |
              cp -r "$(pwd)" /source

        - name: Set up environment.
          run: |
              apk add --no-cache jq curl
              echo "GIT_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
              echo "GIT_PROJECT_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
              echo "GIT_USERNAME=${{ github.repository_owner }}" >> $GITHUB_ENV
              echo "GIT_REPO=${{ github.repository }}" >> $GITHUB_ENV
              echo "GIT_DOMAIN=$(sh /source/scripts/get_gh_domain.sh)" >> $GITHUB_ENV
              echo "GIT_WEBPAGE=https://$(sh /source/scripts/get_gh_domain.sh)" >> $GITHUB_ENV

        - name: Catch artifacts
          run: |
              mkdir /source/artifacts
              cd /source/artifacts
              cp ${{ needs.Musl.outputs.artifact2_path }} ./tlapbot_musl.zip
              cp ${{ needs.GLibc.outputs.artifact2_path }} ./tlapbot_glibc.zip
              cp ${{ needs.Windows.outputs.artifact1_path }} ./tlapbot_windows.zip

        - name: Run Init.
          run: cd /source && sh init.sh

        - name: Deploy branch
          run: |
              apk add --no-cache git bash
              bash /source/scripts/gh-pages.sh
